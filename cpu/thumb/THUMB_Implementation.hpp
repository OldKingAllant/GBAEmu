#pragma once

#include "Instruction.hpp"
#include "../core/CPUContext.hpp"

namespace GBA {
	namespace memory {
		class Bus;
	}
}

namespace GBA::cpu::thumb{
	enum class THUMBInstructionType {
		FORMAT_01,
		FORMAT_02,
		FORMAT_03,
		FORMAT_04,
		FORMAT_05,
		FORMAT_06,
		FORMAT_07,
		FORMAT_08,
		FORMAT_09,
		FORMAT_10,
		FORMAT_11,
		FORMAT_12,
		FORMAT_13,
		FORMAT_14,
		FORMAT_15,
		FORMAT_16,
		FORMAT_17,
		FORMAT_18,
		FORMAT_19,
		UNDEFINED
	};

	using ThumbFunc = void(*)(THUMBInstruction instr,
		memory::Bus* bus, CPUContext& ctx, bool& branch);

	extern ThumbFunc thumb_jump_table[1024];

	void InitThumbJumpTable();

	THUMBInstructionType DecodeThumb(u16 opcode);

	void ExecuteThumb(THUMBInstruction instr, memory::Bus * bus,
	CPUContext & ctx, bool& branch);

	static constexpr u16 THUMB_MASKS[] = {
		0b1110000000000000,
		0b1111100000000000,
		0b1110000000000000,
		0b1111110000000000,
		0b1111110000000000,
		0b1111100000000000,
		0b1111001000000000,
		0b1111001000000000,
		0b1110000000000000,
		0b1111000000000000,
		0b1111000000000000,
		0b1111000000000000,
		0b1111111100000000,
		0b1111011000000000,
		0b1111000000000000,
		0b1111000000000000,
		0b1111111100000000,
		0b1111100000000000,
		0b1111000000000000,
	};

	static constexpr u32 THUMB_VALUES[] = {
		0b0000000000000000,
		0b0001100000000000,
		0b0010000000000000,
		0b0100000000000000,
		0b0100010000000000,
		0b0100100000000000,
		0b0101000000000000,
		0b0101001000000000,
		0b0110000000000000,
		0b1000000000000000,
		0b1001000000000000,
		0b1010000000000000,
		0b1011000000000000,
		0b1011010000000000,
		0b1100000000000000,
		0b1101000000000000,
		0b1101111100000000,
		0b1110000000000000,
		0b1111000000000000,
	};
}